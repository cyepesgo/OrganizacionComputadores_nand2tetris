// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   
   
  
   //Primera parte del circuito para llegar a X' y Y'
   //If zx then x=0
   //If zy then y=0
    Mux16(a=x, b=false, sel=zx, out=x1);
    Mux16(a=y, b=false, sel=zy, out=y1);
    
    //Segunda parte del circuto donde se niega X' y Y' para obtener X'' y Y''
    //If nx then x=!x
    //If ny then y=!y
    Not16(in=x1, out=nox1);
    Mux16(a=x1, b=nox1, sel=nx, out=x2);
    Not16(in=y1, out=noy1);
    Mux16(a=y1, b=noy1, sel=ny, out=y2);
    
    /**
    *Tercera parte del circuito donde se toma como entrada X'' y Y'' 
    *para obtener X''+Y'' o X''&Y'', y despues de seleccionar uno de   
    *los resultados segun el valor de f que se usa como selector en un MUX16 para obtener OUT'.
    *If f then out=x+y else out=x&y    
    */
     
    Add16(a=x2, b=y2, out=outadd);
    And16(a=x2, b=y2, out=outand);
    Mux16(a=outand, b=outadd, sel=f, out=outf);
    
    //Cuarta parte del circuito donde se niega OUT' para obtener finalmente OUT.
    //if no then out=!out
    
    Not16(in=outf, out=outnotf);
    Mux16(a=outf, b=outnotf, sel=no, out=outno);
    
    //Circuito que maneja la salida zr
   And16(a=outno, b=outno, out[0..7]=out07, out[8..15]=out815); 
   Or8Way(in=out07,out=outor1);
   Or8Way(in=out815,out=outor2);
   Or(a=outor1,b=outor2,out=outor3);
   Not(in=outor3,out=zr);

   //Circuito que maneja la salida ng  
   And16(a=outno,b=outno,out[15]=ng);
   And16(a=outno,b=outno,out=out);
}

//By Cyepesgo